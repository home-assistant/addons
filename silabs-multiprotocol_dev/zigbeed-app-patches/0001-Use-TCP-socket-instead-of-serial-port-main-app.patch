From 2a6cc51eb53fcc7d3b6525cb8190d212c430263f Mon Sep 17 00:00:00 2001
Message-ID: <2a6cc51eb53fcc7d3b6525cb8190d212c430263f.1686315449.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Thu, 15 Dec 2022 16:37:02 +0100
Subject: [PATCH] Use TCP socket instead of serial port (main/app)

Instead of opening a serial port, open a TCP socket on port 9999. Pass
the listening socket to the new instance in case a controller reset is
being requested. This makes sure the TCP connection stays up even when
zigbeed restarts.
---
 app.c  | 62 +++++++++++++++++++++++++++++++++++++++++++++++++---------
 main.c |  3 +++
 2 files changed, 56 insertions(+), 9 deletions(-)

diff --git a/app.c b/app.c
index 2b74eab..e7286dd 100644
--- a/app.c
+++ b/app.c
@@ -27,6 +27,7 @@
  */
 
 #define _GNU_SOURCE
+#include <arpa/inet.h>
 #include <stdint.h>
 #include <stdbool.h>
 
@@ -83,6 +84,9 @@ extern jmp_buf gResetJump;
 #define RADIO_URL_MAX_LEN 150
 char radioUrl[RADIO_URL_MAX_LEN];
 
+extern struct in6_addr ezspListenAddress;
+extern uint16_t ezspPort;
+
 /**
  * This enumeration defines the argument return values.
  *
@@ -90,16 +94,18 @@ char radioUrl[RADIO_URL_MAX_LEN];
 enum {
   OT_POSIX_OPT_RADIO_URL      = 'r',
   OT_POSIX_OPT_DEBUG_LEVEL    = 'd',
-  OT_POSIX_OPT_EZSP_INTERFACE = 'p',
+  OT_POSIX_OPT_EZSP_LISTEN    = 'l',
+  OT_POSIX_OPT_EZSP_LISTEN_PORT = 'p',
   OT_POSIX_OPT_HELP           = 'h',
   OT_POSIX_OPT_VERBOSE        = 'v',
 };
 
-#define GETOPT_OPTION_STRING "r:d:p:hv"
+#define GETOPT_OPTION_STRING "r:d:l:p:hv"
 static const struct option kOptions[] = {
   { "radio-url", required_argument, NULL, OT_POSIX_OPT_RADIO_URL },
   { "debug-level", required_argument, NULL, OT_POSIX_OPT_DEBUG_LEVEL },
-  { "ezsp-interface", required_argument, NULL, OT_POSIX_OPT_EZSP_INTERFACE },
+  { "ezsp-listen", required_argument, NULL, OT_POSIX_OPT_EZSP_LISTEN },
+  { "ezsp-listen-port", required_argument, NULL, OT_POSIX_OPT_EZSP_LISTEN_PORT },
   { "help", no_argument, NULL, OT_POSIX_OPT_HELP },
   { "verbose", no_argument, NULL, OT_POSIX_OPT_VERBOSE },
   { 0, 0, 0, 0 }
@@ -113,7 +119,8 @@ static void PrintUsage(const char *aProgramName, FILE *aStream, int aExitCode)
           "Options:\n"
           "    -r  --radio-url <RadioURL>    URL to the radio device. Must include iid=n with n=1,2, or 3.\n"
           "    -d  --debug-level <level>     Debug level for Spinel syslog logging.\n"
-          "    -p  --ezsp-interface <name>   EZSP interface name.\n"
+          "    -l  --ezsp-listen <address>   Address to listen on (EZSP protocol).\n"
+          "    -p  --ezsp-listen-port <port> Port to listen on (EZSP protocol).\n"
           "    -h  --help                    Display this usage information.\n"
           "    -v  --verbose                 Also log Spinel to stderr.\n",
           aProgramName);
@@ -126,7 +133,6 @@ static ssize_t ParseEtcConf(char *confFilePath, int aArgVectorSize, char *aArgVe
   ssize_t argCount = 0;
   FILE *fp = fopen(confFilePath, "r");
   if (fp == NULL) {
-    fprintf(stderr, "Cannot open file %s\n", confFilePath);
     return 0; // no config file
   }
 
@@ -203,6 +209,39 @@ static ssize_t ParseEtcConf(char *confFilePath, int aArgVectorSize, char *aArgVe
   return argCount;
 }
 
+static bool parseListenPort(const char *arg)
+{
+  unsigned long port = strtoul(optarg, NULL, 10);
+  if (!port || port > UINT16_MAX) {
+    return false;
+  }
+  ezspPort = (uint16_t)port;
+  return true;
+}
+
+static bool parseListenAddress(const char *arg)
+{
+  char *tmp;
+  const char ipv4_prefix[] = "::FFFF:";
+  const int ipv4_prefix_len = sizeof(ipv4_prefix) - 1;
+  const int arg_len = strlen(arg);
+
+  if (inet_pton(AF_INET6, arg, &ezspListenAddress) == 1) {
+    return true;
+  }
+
+  tmp = malloc(arg_len + ipv4_prefix_len + 1);
+  strcpy(tmp, ipv4_prefix);
+  strncpy(tmp + ipv4_prefix_len, arg, arg_len + 1);
+  if (inet_pton(AF_INET6, tmp, &ezspListenAddress) == 1) {
+    free(tmp);
+    return true;
+  }
+  free(tmp);
+
+  return false;
+}
+
 static void ParseArg(int aArgCount, char *aArgVector[], PosixConfig *aConfig)
 {
   optind = 1;
@@ -224,13 +263,18 @@ static void ParseArg(int aArgCount, char *aArgVector[], PosixConfig *aConfig)
       case OT_POSIX_OPT_HELP:
         PrintUsage(aArgVector[0], stdout, OT_EXIT_SUCCESS);
         break;
-      case OT_POSIX_OPT_EZSP_INTERFACE:
-        if (strlen(optarg) > SERIAL_PORT_NAME_MAX_LEN) {
-          fprintf(stderr, "Error: ezsp-interface name too long\n");
+      case OT_POSIX_OPT_EZSP_LISTEN:
+	if (!parseListenAddress(optarg)) {
+          fprintf(stderr, "Error: could not parse ezsp-listen address\n");
           exit(OT_EXIT_INVALID_ARGUMENTS);
         }
-        strcpy(serialPort, optarg);
         break;
+      case OT_POSIX_OPT_EZSP_LISTEN_PORT:
+        if (!parseListenPort(optarg)) {
+          fprintf(stderr, "Error: could not parse ezsp-listen port\n");
+          exit(OT_EXIT_INVALID_ARGUMENTS);
+	}
+	break;
       case OT_POSIX_OPT_RADIO_URL:
         if (strlen(optarg) > RADIO_URL_MAX_LEN) {
           fprintf(stderr, "Error: Radio URL too long\n");
diff --git a/main.c b/main.c
index 0091acf..c26a90d 100644
--- a/main.c
+++ b/main.c
@@ -51,6 +51,8 @@ void __gcov_flush();
 // From platform/base/phy/simulation/security.h:
 extern uint8_t simulatorEncryptionType;
 
+extern void serialShutdown(void);
+
 void app_init(void)
 {
 #if defined(EMBER_TEST)
@@ -94,6 +96,7 @@ int main(void)
   app_process_args(argc, argv);
 
   if (setjmp(gResetJump)) {
+    serialShutdown();
     fprintf(stderr, "Restarting\n");
     execvp(argv[0], argv);
   }
-- 
2.41.0

