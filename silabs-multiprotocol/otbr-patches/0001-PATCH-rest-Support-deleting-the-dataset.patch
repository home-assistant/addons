From c3a26e00532c3b35031ee21c88b22f541504b325 Mon Sep 17 00:00:00 2001
From: Gloria Goertz <gloria@gloriaaaa.eu>
Date: Sat, 5 Jul 2025 22:20:19 +0200
Subject: [PATCH] [PATCH] [rest] Support deleting the dataset

This replaces Stefan Agner's old patch.
---
 src/rest/openapi.yaml         | 12 +++++++
 src/rest/resource.cpp         | 35 +++++++++++++++++++
 src/rest/resource.hpp         |  1 +
 3 files changed, 48 insertions(+)

diff --git a/src/rest/openapi.yaml b/src/rest/openapi.yaml
index 49f10e906..e17ebe2fe 100644
--- a/src/rest/openapi.yaml
+++ b/src/rest/openapi.yaml
@@ -248,6 +248,18 @@ paths:
           description: Invalid request body.
         "409":
           description: Writing active operational dataset rejected because Thread network is active.
+    delete:
+      tags:
+        - node
+      summary: Deletes the active operational dataset
+      description: |-
+        Deletes the the active operational dataset on the current node. Only allowed if the Thread node
+        is inactive.
+      responses:
+        "200":
+          description: Successfully deleted the active operational dataset.
+        "409":
+          description: Deleting active operational dataset rejected because Thread network is active.
   /node/dataset/pending:
     get:
       tags:
diff --git a/src/rest/resource.cpp b/src/rest/resource.cpp
index 993c1b9c6..7d40059b7 100644
--- a/src/rest/resource.cpp
+++ b/src/rest/resource.cpp
@@ -779,12 +779,47 @@ exit:
     }
 }
 
+void Resource::DeleteDataset(DatasetType aDatasetType, Response &aResponse) const
+{
+    otbrError                error       = OTBR_ERROR_NONE;
+    std::string              errorCode   = GetHttpStatus(HttpStatusCode::kStatusOk);
+    otOperationalDatasetTlvs datasetTlvs = {};
+
+    if (aDatasetType == DatasetType::kActive)
+    {
+        VerifyOrExit(otThreadGetDeviceRole(mInstance) == OT_DEVICE_ROLE_DISABLED, error = OTBR_ERROR_INVALID_STATE);
+    }
+
+    if (aDatasetType == DatasetType::kActive)
+    {
+        VerifyOrExit(otDatasetSetActiveTlvs(mInstance, &datasetTlvs) == OT_ERROR_NONE, error = OTBR_ERROR_REST);
+    }
+    else if (aDatasetType == DatasetType::kPending)
+    {
+        VerifyOrExit(otDatasetSetPendingTlvs(mInstance, &datasetTlvs) == OT_ERROR_NONE, error = OTBR_ERROR_REST);
+    }
+    aResponse.SetResponsCode(errorCode);
+
+exit:
+    if (error == OTBR_ERROR_INVALID_STATE)
+    {
+        ErrorHandler(aResponse, HttpStatusCode::kStatusConflict);
+    }
+    else if (error != OTBR_ERROR_NONE)
+    {
+        ErrorHandler(aResponse, HttpStatusCode::kStatusInternalServerError);
+    }
+}
+
 void Resource::Dataset(DatasetType aDatasetType, const Request &aRequest, Response &aResponse) const
 {
     std::string errorCode;
 
     switch (aRequest.GetMethod())
     {
+    case HttpMethod::kDelete:
+        DeleteDataset(aDatasetType, aResponse);
+        break;
     case HttpMethod::kGet:
         GetDataset(aDatasetType, aRequest, aResponse);
         break;
diff --git a/src/rest/resource.hpp b/src/rest/resource.hpp
index 4b9e15e1b..e1b0c6d1b 100644
--- a/src/rest/resource.hpp
+++ b/src/rest/resource.hpp
@@ -145,6 +145,7 @@ private:
     void GetDataRloc(Response &aResponse) const;
     void GetDataset(DatasetType aDatasetType, const Request &aRequest, Response &aResponse) const;
     void SetDataset(DatasetType aDatasetType, const Request &aRequest, Response &aResponse) const;
+    void DeleteDataset(DatasetType aDatasetType, Response &aResponse) const;
     void GetCommissionerState(Response &aResponse) const;
     void SetCommissionerState(const Request &aRequest, Response &aResponse) const;
     void GetJoiners(Response &aResponse) const;
-- 
2.50.0

